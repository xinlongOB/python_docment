"""
目标：
    使用定时器添加敌机
    设计Enemy类

1、使用定时器添加敌机
    1、游戏启动后，每隔一秒会出现一架敌机
    2、每架敌机向屏幕下方飞行，飞行速度各不相同
    3、每架敌机出现的水平位置不同
    4、当敌机从屏幕下方飞出，不会再飞到屏幕中

1、定时器
    在pygame中可以使用pygame.time.set_timer()来添加定时器
    所谓定时器就是每隔一段时间，去执行一些操作
    set_timer(eventid,millseconds)   -> None   (第一个参数是事件ID 第二个是时间 以毫秒为单位)

    set_timer可以创建一个事件
    可以在游戏循循环的事件监听方法中捕捉到该事件
    第一个参数 事件代号 需要基于常量pygame.USEREVENT来指定
        USERENEVT是一个整数，在添加的事件可以使用USEREVENT +1 指定  以此类推...
    第二个参数是事件触发间隔的毫秒值

    定时器事件的监听
        通过pygame.event.get()可以获取当前时刻所有事件列表
        遍历列表 并且判断event.type 是否等于eventid  如果相等 表示定时器事件发生



#定义并监听敌机的定时器事件
#1、定义定时器常量--eventid
#2、在初始化方法中，调用set_timer方法设置定时器事件
#3、在游戏循环中，监听定时器事件   判断类型是否是事件类型

#设计Enemy类
#1、游戏启动后，每隔一秒会出现一架敌机
#2、每架敌机向屏幕下方飞行，飞行速度各不相同
#3、每架敌机出现的水平位置也不相同
#4、当敌机从屏幕下方飞出，不会再飞到屏幕中

    #初始化方法
        #指定敌机图像
        #随机敌机的初始位置和初始速度
    #重新update()方法
    #判断是否飞出屏幕，如果是  从精灵组删除

"""
"""
2.2创建敌机
1、在_create_sprites添加敌机精灵组
    敌机是定时被创建的，因此在初始化方法中，不需要创建敌机
2、在_event_handler，创建敌机，并且添加到精灵组
    调用精灵组的add 方法 可以向精灵组添加精灵
3、在_update_sprites，让敌机精灵组调用update 和draw方法


"""

"""
2.4 移除屏幕销毁敌机
__del__内置方法会在对象被销毁前调用，在开发中，可以用于判断对象是否被销毁

判断敌机是否飞出屏幕，如果是，调用kill()方法从所有组中删除
    def update(self):
        #调用父类方法，保持垂直方向的飞行
        super().update()

        #判断是否飞出屏幕  如果飞出  从精灵组中删除
        if self.rect.y >= SCREEN_RECT.height:
            print("飞机飞出屏幕...")
            self.kill()

        def __del__(self):
            print("敌机挂了 %s" % self.rect)
"""
