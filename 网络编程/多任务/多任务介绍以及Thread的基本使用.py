"""
并发：假的多任务   任务数多于cpu的核数         大多数多任务都是并发
并行：真的多任务   cpu核数大于等于任务数

"""
# 单任务模式
"""
import time

def sing():
    for i in range(5):
        print("正在唱歌")
        time.sleep(1)


def dance():
    for i in range(5):
        print("跳舞")
        time.sleep(1)

def main():
    sing()
    dance()


if __name__ == '__main__':
    main()

#现在会先把sing函数运行完 在调用dance函数
"""
# 多任务
import time
import threading


def sing():
    for i in range(5):
        print("正在唱歌")
        time.sleep(1)


# 如果创建Thread时指定的函数，运行结束那么意味着这个子线程结束了...

def dance():
    for i in range(5):
        print("跳舞")
        time.sleep(1)


def main():
    t1 = threading.Thread(target=sing)
    t2 = threading.Thread(target=dance)
    # 当调用Thread的时候，不会创建线程
    # 当调用Thread创建出来的实例对象的start方法 的时候  才会创建线程 以及让这个线程开始运行

    t1.start()
    t2.start()
    while True:
        print(threading.enumerate())  # enumerate 这个对象的返回值是进程
        if len(threading.enumerate()) <= 1:
            break
        time.sleep(1)


if __name__ == '__main__':
    main()
    # 线程执行的顺序 完全是系统自动调用   所以函数里面加了延时

    # 总结：当调用Thread的时候，不会创建线程
    #       当调用Thread创建出来的实例对象的start方法的时候，才会创建线程以及让这个线程开始运行

# @Time     : 2019/12/11 9:39
# @Author   : wangjun
# @Mail     : 158970251@qq.com
# @File     : name.py
# @Software : PyCharm
# _*_ coding: utf-8 _*_
import random
import multiprocessing

listf = [
    '王', '李', '张', '刘', '陈', '杨', '黄', '赵', '吴', '周', '徐', '孙', '马', '朱', '胡', '郭', '何', '高', '林', '罗',
    '郑', '梁', '谢', '宋', '唐', '许', '韩', '冯', '邓', '曹', '彭', '曾', '肖', '田', '董', '袁', '潘', '于', '蒋', '蔡',
    '余', '杜', '叶', '程', '苏', '魏', '吕', '丁', '任', '沈', '姚', '卢', '姜', '崔', '钟', '谭', '陆', '汪', '范', '金',
    '石', '廖', '贾', '夏', '韦', '付', '方', '白', '邹', '孟', '熊', '秦', '邱', '江', '尹', '薛', '闫', '段', '雷', '侯',
    '龙', '史', '陶', '黎', '贺', '顾', '毛', '郝', '龚', '邵', '万', '钱', '严', '覃', '武', '戴', '莫', '孔', '向', '汤']

listm = [
    '兰', '旺', '瑶', '任', '晴', '镇', '乔', '欣', '昆', '泰', '筱', '秉', '曜', '忠', '真', '凯', '雯', '懿', '崇', '成', '顺', '博', '',
    '孟', '琦', '兆', '佑', '健', '金', '宥', '贵', '盛', '元', '珍', '辰', '初', '慈', '勇', '仲', '思', '雪', '右', '琼', '华', '其',
    '火', '彦', '安', '婷', '曼', '予', '湖', '绍', '伊', '以', '宝', '育', '夙', '富', '武', '品', '玉', '馨', '家', '山', '美', '一', '',
    '常', '扬', '诚', '士', '姿', '力', '耀', '竣', '允', '筠', '瑜', '舜', '昌', '冰', '行', '晓', '轩', '义', '纬', '淑', '荣', '海',
    '呈', '素', '之', '碧', '韦', '峻', '晏', '胜', '裕', '惠', '子', '昭', '骏', '芳', '凡', '白', '恭', '弘', '明', '兴', '坚', '紫', '',
    '婉', '芝', '小', '孝', '翊', '乐', '如', '姵', '珮', '智', '惟', '添', '旻', '宁', '东', '淳', '柏', '沛', '合', '国', '宣', '益',
    '伯', '长', '于', '平', '绿', '维', '舒', '妤', '南', '昱', '宇', '岳', '恩', '礼', '群', '佩', '军', '璇', '文', '咏', '介', '喜', '',
    '毅', '君', '劭', '嘉', '肇', '法', '逸', '治', '万', '松', '水', '浩', '莹', '景', '茂', '绮', '蓉', '薇', '郁', '俞', '和', '坤',
    '毓', '均', '梦', '培', '与', '廷', '乃', '勋', '登', '爱', '梅', '千', '书', '欢', '琇', '念', '玟', '秋', '颖', '得', '星', '江', '',
    '容', '映', '德', '怡', '茹', '仪', '儒', '杰', '哲', '汉', '刚', '娇', '修', '旭', '桂', '雨', '仕', '莉', '克', '佳', '珊', '阿',
    '秀', '尚', '尧', '晋', '湘', '俐', '春', '虹', '瑞', '百', '琳', '语', '阳', '木', '建', '丰', '琪', '财', '英', '慧', '靖', '菁', '',
    '若', '大', '原', '婕', '意', '展', '巧', '人', '吟', '竹', '重', '鸿', '敬', '依', '进', '台', '左', '亦', '韵', '钰', '新', '羽',
    '静', '名', '中', '仁', '采', '亭', '妙', '希', '必', '承', '豪', '吉', '芷', '上', '石', '冠', '威', '又', '辛', '奕', '雅', '泓', '',
    '伶', '玫', '定', '世', '皓', '协', '芸', '政', '洁', '祥', '清', '光', '贞', '翠', '纯', '伟', '振', '庭', '易', '香', '永', '皇',
    '茜', '良', '敏', '燕', '俊', '月', '民', '隆', '侑', '诗', '心', '友', '致', '贤', '宛', '奇', '玲', '志', '宪', '启', '亚', '盈', '',
    '睿', '涵', '柔', '萱', '昀', '伦', '升', '季', '玮', '凤', '善', '云', '祯', '幸', '宏', '可', '信', '天', '宗', '宜', '忆', '康',
    '翰', '正', '丽', '翔', '少', '朝', '倩', '圣', '钧', '琬', '铭', '学', '幼', '立', '蕙', '青', '枝', '庆', '']

listl = [
    '盛', '斌', '铃', '峰', '志', '原', '莲', '扬', '全', '茂', '辰', '彰', '臻', '竹', '翰', '静', '妹', '霖', '添', '吟', '廷', '正',
    '奇', '平', '安', '柔', '毓', '贵', '宪', '怡', '秋', '茜', '和', '玉', '泉', '珍', '季', '娇', '盈', '蓉', '仪', '群', '升', '忠',
    '慧', '睿', '军', '友', '威', '云', '玲', '康', '彬', '雅', '勋', '丰', '帆', '君', '琴', '毅', '玫', '璇', '淑', '秀', '琦', '玮',
    '媛', '逸', '博', '筑', '维', '韦', '均', '昌', '欣', '合', '强', '法', '冰', '其', '昀', '心', '惠', '甄', '薇', '旺', '纬', '南',
    '辛', '伯', '凤', '祥', '倩', '舜', '菱', '英', '美', '虹', '松', '星', '辉', '元', '圣', '隆', '龙', '花', '苹', '筠', '任', '纶',
    '岚', '妃', '昆', '贤', '生', '瑄', '谦', '兴', '伟', '宝', '沛', '馨', '珮', '蓁', '蕙', '钰', '杰', '劭', '旭', '宏', '庭', '坤',
    '轩', '修', '芸', '佳', '月', '桦', '来', '霞', '孜', '乐', '达', '敏', '善', '亦', '超', '钧', '天', '羽', '刚', '绿', '爱', '纯',
    '侑', '士', '名', '雯', '义', '亚', '琬', '芷', '尧', '伦', '新', '乔', '雄', '洁', '幸', '娥', '恩', '玟', '书', '惟', '泰', '瑜',
    '珊', '远', '晴', '彦', '哲', '瑞', '琇', '智', '映', '珠', '鸿', '梦', '燕', '人', '春', '儒', '卿', '佩', '祯', '良', '清', '欢',
    '中', '麟', '骏', '岳', '财', '芳', '诚', '文', '真', '柏', '湖', '菁', '男', '一', '佑', '颖', '阳', '水', '枝', '茹', '德', '豪',
    '谕', '华', '裕', '山', '孝', '依', '木', '宣', '涵', '凯', '源', '韵', '成', '育', '喜', '宁', '郁', '仁', '仲', '希', '芬', '雨',
    '瑶', '翔', '火', '铭', '芝', '东', '定', '璋', '意', '江', '靖', '民', '易', '如', '淳', '光', '发', '启', '俐', '俊', '礼', '齐',
    '庆', '谚', '香', '富', '妤', '宜', '弘', '学', '汉', '政', '以', '伶', '勇', '绮', '凡', '吉', '梅', '慈', '容', '明', '荣', '萍',
    '贞', '娟', '信', '青', '皓', '雪', '治', '琳', '紫', '兰', '白', '婷', '莹', '嘉', '恭', '萱', '顺', '行', '琪', '念', '宇', '海',
    '坚', '福', '绍', '桂']


def create(q):
    for record in range(1, 1000001):
        name = random.choice(listf) + random.choice(listm) + random.choice(listl)
        q.put(name)


def chuli(q):
    while True:
        waiting = list()
        data = q.get()  # 循环取出数据
        waiting.append(data)  # 把取出的数据写入到列表waiting中
        print(data)
        time.sleep(1)

        if q.empty():  # 判断  如果队列为空   退出循环
            break


def main():
    # 1、创建一个队列
    q = multiprocessing.Queue()
    # 2、创建多个进程，将队列的引用当做实参进行传递到里面
    p1 = multiprocessing.Process(target=create, args=(q,))
    p2 = multiprocessing.Process(target=chuli, args=(q,))

    p1.start()
    p2.start()


if __name__ == "__main__":
    main()

# for record in range(1, 1000001):
#     name = random.choice(listf) + random.choice(listm) + random.choice(listl)
#     f = open('file.txt', 'a+')
#     f.write(name + '\n')
#     f.close()
