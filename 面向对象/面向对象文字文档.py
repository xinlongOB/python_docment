"""
#   面向对象的三大特性
#封装   根据职责将属性和方法封装到一个抽象的类中
#继承     实现代码重用  相同的代码不需要重复编写
#多态     不同的对象调用相同的方法，产生不同的执行结果，增加代码的灵活的
1、面向对象基本概念
    我们之前学习的变成方式是面向过程
    面向过程和面向对象，是两种不同的编程方式

    1.1 过程和函数
        过程是早起的一个编程概念
        过程类似于函数，只能执行，但是没有返回值
        函数不仅能执行，还可以返回结果
    1.2面向过程和面向对象基本概念
        （1）面向过程
        把完成某一个需求的所有步骤从头到尾逐步实现
        根据开发需求，将某些功能独立的代码封装成一个又一个函数
        最后完成的代码，就是顺序地调用不同的函数
        特点
        注重步骤与过程，不注重职责分工
        如果需求复杂，代码会变得很复杂
        开发复杂项目，没有固定的套路，开发难度很大
        （2）面向对象
        相比较函数，面向对象是更大的封装，根据职责在一个对象中封装多个方法
        在完整某一个需求前，首先确定职责---要做的事情（方法）
        根据职责确定不同的对象，在对象内部封装不同的方法（可以多个）
        最后完成的代码，就是顺序地让不同的对象调用不同的方法
        特点
        注重对象和职责，不同的对象承担不同的职责
        更加适合应对复杂的需求变化，是专门针对复杂项目开发，提供的固定套路
        需要在面向过程的基础上，在学习一些面向对象的语法


"""
"""
类和对象
1、类和对象的概念
类和对象是面向对象编程的两个核心概念
    1.1类
    类是对一群具有相同特征或者行为的事物的一个统称，是抽象的，不能直接使用
        特征被称为属性
        行为被称为方法
    类就相当于制造飞机时的图纸，是一个模板，是负责创建对象的
    1.2对象
    对象是由类创建出来的一个具体存在，可以直接使用
    由那一个类创建出来的，就拥有在哪一个类中定义的
        属性
        方法
    对象就相当于用图纸制造飞机
    在开发中，应该先有类，再有对象

2、类和对象的关系
类是模板，对象是根据类这个模板创建出来的，应该先有类，再有对象
类只有一个，而对象可以有很多个
    不同的对象之前属性可能会各不相同
类中定义了什么属性和方法，对象中就有什么属性和方法，不可能多，也不可能少

3、类的设计
    1、类名 这类事物的名字，满足大驼峰命名法
        大驼峰命名法：CapWords    每一个单词的首字母大写， 单词与单词之前没有下划线
    2、属性 这类事物具有什么样的特征
    3、方法 这类事物具有什么样的行为
    
    3.1 类名的确定
        名词提炼法  分析整个项目流程，出现的名字，通常就是找到的类
    3.2 属性和方法的确定
        对对象的特征描述，通常可以定义成属性
        对象具有的行为，通常可以定义成方法
            提示：需求中没有涉及的属性或者方法在设计类时，不需要考虑
            
练习1
需求
小明 今年 18 岁，身高 1.75，每天早上 跑 完步，会去 吃 东西
小美 今年 17 岁，身高 1.65，小美不跑步，小美喜欢 吃 东西 
需要定义一个大类        人
定义属性           姓名   年龄   身高
动作               跑步   吃

练习 2
一只 黄颜色 的 狗狗 叫 大黄
看见生人 汪汪叫
看见家人 摇尾巴

需要定义一个大类        狗
定义属性    name    color
定义动作    汪汪叫   摇尾巴
"""

"""
面向对象基础语法
1、dir内置函数
    在python中对象是无所不在的，我们之前学习的变量、数据、函数都是对象
    在python中可以使用一下两个方法验证：
        1、在标识符/数据后输入一个. 然后TAB键，ipython会提示该对象能够调用的方法列表
        2、使用内置函数 dir 传入 标识符 / 数据，可以查看对象内的 所有属性及方法
        提示 __方法名__ 格式的方法是 Python 提供的 内置方法 / 属性，稍后会给大家介绍一些常用的 内置方法 / 属性
        

"""
